buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'

version = "mc1.11-r5"
group= "flammpfeil.slashblade" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "SlashBlade"

minecraft {
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    version = "1.11.2-13.20.0.2260"
    runDir = "run"

    mappings = "snapshot_20161220"
    
    //static final boolean isRelease = /*@IS_RELEASE@*/ false;
    replace '@IS_RELEASE@', '*/true;//'

    replace '@VERSION@', project.version
    replace '@MC_VERSION@', version
}
processResources
{
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version, 'modname':project.archivesBaseName, 'modid':project.group
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

dependencies {
    runtime fileTree(dir: 'libs', include: '*.jar')
}

def defaultEncoding = 'UTF-8'
tasks.withType(AbstractCompile) each {
    it.options.encoding = defaultEncoding
    it.options.compilerArgs += ['-source', '1.6', '-target', '1.6']
}

compileTestJava {
    options.encoding = defaultEncoding
    options.compilerArgs += ['-source', '1.6', '-target', '1.6']
}


jar {
    manifest {
        //attributes 'FMLCorePlugin': 'mods.flammpfeil.slashblade.asm.CorePlugin'
        attributes 'FMLCorePluginContainsFMLMod': true
    }
}


task sourceZip(type: Zip) {
    from sourceSets.main.allSource
    classifier = 'src'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    from sourceSets.main.allSource
    classifier = 'deobf'
}

artifacts {
    archives sourceZip
    archives deobfJar
}

def mavenRepository = '/maven'

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri(mavenRepository))
        }
    }
}